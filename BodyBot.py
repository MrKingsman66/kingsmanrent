import asyncio
import uuid
import re
import html
from datetime import datetime, timedelta
import sqlite3
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
)

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "8148697332:AAGy6r-GNzqVYabKCQIlfQI-gCkbelQucFM"
GROUP_ID = -1002773883024
TOPIC_ORDERS = 81003
TOPIC_SUPPORT = 81451
ADMIN_IDS = [841285005]

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite
DB_PATH = 'kingsman_bot.db'

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏)
player_data = {}
support_requests = []
order_confirmations = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
staff_management_data = {}  # –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
admin_order_management = {}  # –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ –∞–¥–º–∏–Ω–∞–º–∏

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite ---
def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS staff (
                user_id INTEGER PRIMARY KEY,
                name TEXT NOT NULL,
                username TEXT,
                position TEXT NOT NULL,
                added_at TEXT NOT NULL,
                added_by TEXT NOT NULL,
                status TEXT DEFAULT 'active'
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS orders (
                id TEXT PRIMARY KEY,
                user_id INTEGER NOT NULL,
                nickname TEXT NOT NULL,
                username_link TEXT NOT NULL,
                subscription TEXT NOT NULL,
                start_date TEXT NOT NULL,
                end_date TEXT NOT NULL,
                created_at TEXT NOT NULL,
                status TEXT DEFAULT 'pending'
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS assignments (
                order_id TEXT PRIMARY KEY,
                staff_id INTEGER NOT NULL,
                staff_name TEXT NOT NULL,
                staff_username TEXT NOT NULL,
                assigned_at TEXT NOT NULL,
                status TEXT DEFAULT 'in_progress',
                FOREIGN KEY (order_id) REFERENCES orders (id)
            )
        ''')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        cursor.execute('''
            INSERT OR IGNORE INTO staff (user_id, name, username, position, added_at, added_by, status)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (
            841285005, 
            "Denis_Kingsman", 
            "admin", 
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            datetime.now().strftime("%d.%m.%Y %H:%M"), 
            "system", 
            "active"
        ))
        
        conn.commit()
        conn.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

# --- –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
async def load_staff_from_db():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute('SELECT user_id, name, username, position FROM staff WHERE status = "active"')
        staff_rows = cursor.fetchall()
        
        staff_members = {}
        for row in staff_rows:
            user_id, name, username, position = row
            staff_members[user_id] = {
                "name": name,
                "username": username,
                "position": position
            }
        
        conn.close()
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(staff_members)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        return staff_members
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {e}")
        return {}

# --- –†–∞–±–æ—Ç–∞ —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ ---
async def add_staff_member(user_id, name, username, position, added_by):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
        cursor.execute('SELECT user_id FROM staff WHERE user_id = ?', (user_id,))
        existing_staff = cursor.fetchone()
        
        if existing_staff:
            conn.close()
            return False, f"‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å ID {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        cursor.execute('''
            INSERT INTO staff (user_id, name, username, position, added_at, added_by, status)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (
            user_id,
            name,
            username,
            position,
            datetime.now().strftime("%d.%m.%Y %H:%M"),
            added_by,
            "active"
        ))
        
        conn.commit()
        conn.close()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        global STAFF_MEMBERS
        STAFF_MEMBERS = await load_staff_from_db()
        
        return True, f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {name} (@{username}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ {position}"
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}")
        return False, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}"

async def update_staff_position(user_id, new_position, updated_by):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        cursor.execute('SELECT name FROM staff WHERE user_id = ?', (user_id,))
        staff_info = cursor.fetchone()
        
        if not staff_info:
            conn.close()
            return False, f"‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç—å
        cursor.execute('''
            UPDATE staff SET position = ? WHERE user_id = ?
        ''', (new_position, user_id))
        
        conn.commit()
        conn.close()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        global STAFF_MEMBERS
        STAFF_MEMBERS = await load_staff_from_db()
        
        staff_name = STAFF_MEMBERS.get(user_id, {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        return True, f"‚úÖ –î–æ–ª–∂–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {staff_name} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {new_position}"
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏: {e}")
        return False, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏: {e}"

async def remove_staff_member(user_id, removed_by):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        cursor.execute('SELECT name FROM staff WHERE user_id = ?', (user_id,))
        staff_info = cursor.fetchone()
        
        if not staff_info:
            conn.close()
            return False, f"‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ
        cursor.execute('''
            UPDATE staff SET status = 'inactive' WHERE user_id = ?
        ''', (user_id,))
        
        conn.commit()
        conn.close()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        global STAFF_MEMBERS
        STAFF_MEMBERS = await load_staff_from_db()
        
        staff_name = STAFF_MEMBERS.get(user_id, {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        return True, f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {staff_name} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã"
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}")
        return False, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}"

async def get_staff_member(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM staff WHERE user_id = ?', (user_id,))
        row = cursor.fetchone()
        
        conn.close()
        
        if row:
            return {
                "user_id": row[0],
                "name": row[1],
                "username": row[2],
                "position": row[3],
                "added_at": row[4],
                "added_by": row[5],
                "status": row[6]
            }
        return None
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}")
        return None

# --- –†–∞–±–æ—Ç–∞ —Å –∑–∞–∫–∞–∑–∞–º–∏ ---
async def get_all_orders():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM orders ORDER BY created_at DESC')
        order_rows = cursor.fetchall()
        
        orders = []
        for row in order_rows:
            orders.append({
                "id": row[0],
                "user_id": row[1],
                "nickname": row[2],
                "username_link": row[3],
                "subscription": row[4],
                "start": row[5],
                "end": row[6],
                "created_at": row[7],
                "status": row[8]
            })
        
        conn.close()
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(orders)} –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        return orders
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤: {e}")
        return []

async def save_order_to_db(order_data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO orders (id, user_id, nickname, username_link, subscription, start_date, end_date, created_at, status)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            order_data["id"],
            order_data["user_id"],
            order_data["nickname"],
            order_data["username_link"],
            order_data["subscription"],
            order_data["start"],
            order_data["end"],
            datetime.now().strftime("%d.%m.%Y %H:%M"),
            "pending"
        ))
        
        conn.commit()
        conn.close()
        
        print(f"‚úÖ –ó–∞–∫–∞–∑ {order_data['id']} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        return False

async def update_order_status(order_id, status):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            UPDATE orders SET status = ? WHERE id = ?
        ''', (status, order_id))
        
        conn.commit()
        conn.close()
        
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {status}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return False

async def assign_order_to_staff(order_id, staff_id, staff_name, staff_username):
    """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT OR REPLACE INTO assignments (order_id, staff_id, staff_name, staff_username, assigned_at, status)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (
            order_id,
            staff_id,
            staff_name,
            staff_username,
            datetime.now().strftime("%d.%m.%Y %H:%M"),
            "in_progress"
        ))
        
        conn.commit()
        conn.close()
        
        print(f"‚úÖ –ó–∞–∫–∞–∑ {order_id} –Ω–∞–∑–Ω–∞—á–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {staff_name} (@{staff_username})")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        return False

async def get_order_assignment(order_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM assignments WHERE order_id = ?', (order_id,))
        row = cursor.fetchone()
        
        conn.close()
        
        if row:
            return {
                "order_id": row[0],
                "staff_id": row[1],
                "staff_name": row[2],
                "staff_username": row[3],
                "assigned_at": row[4],
                "status": row[5]
            }
        return None
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {e}")
        return None

async def get_user_active_orders(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        orders = await get_all_orders()
        active_orders = []
        today = datetime.now().date()

        for order in orders:
            if order["user_id"] == user_id:
                try:
                    end_date = datetime.strptime(order["end"], "%d.%m.%Y").date()
                    # –°—á–∏—Ç–∞–µ–º –∑–∞–∫–∞–∑ –∞–∫—Ç–∏–≤–Ω—ã–º, –µ—Å–ª–∏ –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è >= —Å–µ–≥–æ–¥–Ω—è
                    if end_date >= today:
                        active_orders.append(order)
                except ValueError:
                    continue

        return active_orders
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return []

async def can_user_create_order(user_id, username_link):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_orders = []
        all_orders = await get_all_orders()

        for order in all_orders:
            if order["user_id"] == user_id or order["username_link"] == username_link:
                user_orders.append(order)

        if not user_orders:
            return True, None  # –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ - –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        active_orders = []
        today = datetime.now().date()

        for order in user_orders:
            try:
                end_date = datetime.strptime(order["end"], "%d.%m.%Y").date()
                # –°—á–∏—Ç–∞–µ–º –∑–∞–∫–∞–∑ –∞–∫—Ç–∏–≤–Ω—ã–º, –µ—Å–ª–∏ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å 1 –¥–µ–Ω—å –∏–ª–∏ –±–æ–ª—å—à–µ
                days_until_end = (end_date - today).days
                if days_until_end >= 0:  # –ê–∫—Ç–∏–≤–µ–Ω —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –≤ –±—É–¥—É—â–µ–º
                    active_orders.append((order, days_until_end))
            except ValueError:
                continue

        if not active_orders:
            return True, None  # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ - –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å

        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–∞—Ç–æ–π –æ–∫–æ–Ω—á–∞–Ω–∏—è
        latest_order = max(active_orders, key=lambda x: datetime.strptime(x[0]["end"], "%d.%m.%Y"))
        order_data, days_until_end = latest_order

        if days_until_end > 1:
            return False, f"‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç '{order_data['subscription']}', –∫–æ—Ç–æ—Ä—ã–π –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {order_data['end']}.\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∑–∞ 1 –¥–µ–Ω—å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ."
        elif days_until_end == 1:
            return True, f"‚ö†Ô∏è –í–∞—à —Ç–µ–∫—É—â–∏–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç '{order_data['subscription']}' –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∑–∞–≤—Ç—Ä–∞ ({order_data['end']}). –í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç."
        else:  # days_until_end == 0
            return True, f"‚ö†Ô∏è –í–∞—à —Ç–µ–∫—É—â–∏–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç '{order_data['subscription']}' –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç."

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        return True, None

async def delete_order_from_db(order_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã orders
        cursor.execute('DELETE FROM orders WHERE id = ?', (order_id,))
        
        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        cursor.execute('DELETE FROM assignments WHERE order_id = ?', (order_id,))
        
        conn.commit()
        conn.close()
        
        print(f"‚úÖ –ó–∞–∫–∞–∑ {order_id} —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        return False

async def add_order_by_admin(order_data):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∑–∞–∫–∞–∑–∞
        order_id = str(uuid.uuid4())[:8]
        
        cursor.execute('''
            INSERT INTO orders (id, user_id, nickname, username_link, subscription, start_date, end_date, created_at, status)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            order_id,
            order_data["user_id"],
            order_data["nickname"],
            order_data["username_link"],
            order_data["subscription"],
            order_data["start"],
            order_data["end"],
            datetime.now().strftime("%d.%m.%Y %H:%M"),
            order_data.get("status", "pending")
        ))
        
        conn.commit()
        conn.close()
        
        print(f"‚úÖ –ó–∞–∫–∞–∑ {order_id} –¥–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        return True, order_id
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–æ–º: {e}")
        return False, None

def validate_nickname(nickname):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –Ω–∏–∫–∞: –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ"""
    if "_" not in nickname:
        return False, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∏–∫–∞! –ù–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ (_).\n\n–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: Denis_Kingsman\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:"

    if len(nickname) < 3:
        return False, "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –Ω–∏–∫! –ù–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞."

    if len(nickname) > 20:
        return False, "‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –Ω–∏–∫! –ù–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤."

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã (–±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ)
    if not re.match(r'^[a-zA-Z0-9_]+$', nickname):
        return False, "‚ùå –ù–∏–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã! –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã (a-z, A-Z), —Ü–∏—Ñ—Ä—ã (0-9) –∏ –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ (_)."

    return True, "‚úÖ –§–æ—Ä–º–∞—Ç –Ω–∏–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π!"

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def start_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="start_order")],
        [InlineKeyboardButton(text="üõ† –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support_start")]
    ])

def subscription_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöó –≠–∫–æ–Ω–æ–º", callback_data="econom")],
        [InlineKeyboardButton(text="üöò –°—Ç–∞–Ω–¥–∞—Ä—Ç", callback_data="standard")],
        [InlineKeyboardButton(text="üöô –ö–æ–º—Ñ–æ—Ä—Ç", callback_data="comfort")],
        [InlineKeyboardButton(text="üèé –ü—Ä–µ–º–∏—É–º", callback_data="premium")]
    ])

def confirmation_keyboard(order_id) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{order_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{order_id}")
        ]
    ])

def staff_actions_keyboard(order_id) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ - –ü–†–û–°–¢–û –ö–ù–û–ü–ö–ê –í–ó–Ø–¢–¨ –ó–ê–ö–ê–ó"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="–í–∑—è—Ç—å –∑–∞–∫–∞–∑",
            callback_data=f"take_order_{order_id}"
        )]
    ])

def admin_orders_keyboard(page=0, orders_per_page=10):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    control_buttons = []
    if page > 0:
        control_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_orders_page_{page-1}"))
    
    control_buttons.append(InlineKeyboardButton(text="‚úö –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="admin_add_order"))
    
    if len(await get_all_orders()) > (page + 1) * orders_per_page:
        control_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"admin_orders_page_{page+1}"))
    
    if control_buttons:
        keyboard.append(control_buttons)
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def admin_order_actions_keyboard(order_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∑–∞–∫–∞–∑–æ–º –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"admin_delete_order_{order_id}"),
            InlineKeyboardButton(text="üìã –í—Å–µ –∑–∞–∫–∞–∑—ã", callback_data="admin_all_orders_0")
        ]
    ])

def admin_confirm_delete_keyboard(order_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"admin_confirm_delete_{order_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_all_orders_0")
        ]
    ])

# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---
@dp.message(Command("start"))
async def cmd_start(message: Message):
    if message.chat.type != "private":
        return
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Kingsman Rent.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=start_keyboard()
    )

@dp.message(Command("status"))
async def cmd_status(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ - —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –≤—Å–µ—Ö"""
    print(f"üîß –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /status –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    orders = await get_all_orders()
    staff_members = await load_staff_from_db()

    # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    today = datetime.now().date()
    active_orders = 0
    pending_orders = 0
    assigned_orders = 0

    for order in orders:
        try:
            if order["status"] == "assigned":
                assigned_orders += 1
            elif order["status"] == "pending":
                pending_orders += 1

            end_date = datetime.strptime(order["end"], "%d.%m.%Y").date()
            if end_date >= today:
                active_orders += 1
        except ValueError:
            continue

    storage_type = "‚úÖ SQLite Database"

    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    status_text = (
        f"ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ Kingsman Rent:\n"
        f"üìä –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)}\n"
        f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤: {active_orders}\n"
        f"üíæ –•—Ä–∞–Ω–∏–ª–∏—â–µ: {storage_type}\n"
        f"üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(staff_members)}"
    )

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if message.from_user.id in ADMIN_IDS:
        status_text += f"\n\nüë§ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {len(player_data)}"
        status_text += f"\nüÜò –û–±—Ä–∞—â–µ–Ω–∏–π –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {len(support_requests)}"
        status_text += f"\nüîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"

    await message.answer(status_text)
    print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")

# --- –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ ---
@dp.message(Command("add_staff"))
async def cmd_add_staff(message: Message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ - –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    staff_management_data[message.from_user.id] = {
        "stage": "waiting_staff_user_id",
        "action": "add"
    }

    await message.answer(
        "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ User ID –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (—á–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä):\n\n"
        "üí° –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å User ID?\n"
        "1. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É /myid\n"
        "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ User ID –∏–∑ –æ—Ç–≤–µ—Ç–∞"
    )

@dp.message(Command("set_position"))
async def cmd_set_position(message: Message):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ - –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    staff_management_data[message.from_user.id] = {
        "stage": "waiting_staff_user_id",
        "action": "set_position"
    }

    await message.answer(
        "‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ User ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (—á–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä):"
    )

@dp.message(Command("remove_staff"))
async def cmd_remove_staff(message: Message):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ - –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    staff_management_data[message.from_user.id] = {
        "stage": "waiting_staff_user_id",
        "action": "remove"
    }

    await message.answer(
        "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ User ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (—á–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä):"
    )

@dp.message(Command("list_staff"))
async def cmd_list_staff(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    staff_members = await load_staff_from_db()
    
    if not staff_members:
        await message.answer("üì≠ –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
        return

    staff_list = "üë• –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n\n"
    for i, (user_id, staff_data) in enumerate(staff_members.items(), 1):
        username_display = f"@{staff_data['username']}" if staff_data['username'] else "–Ω–µ—Ç username"
        staff_list += (
            f"{i}. üë§ {staff_data['name']}\n"
            f"   üì± {username_display}\n"
            f"   üíº {staff_data['position']}\n"
            f"   üÜî ID: {user_id}\n\n"
        )

    await message.answer(staff_list)

# --- –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ ---
@dp.message(Command("all_orders"))
async def cmd_all_orders(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    await show_orders_page(message, 0)

async def show_orders_page(message: Message, page: int, orders_per_page: int = 10):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∑–∞–∫–∞–∑–∞–º–∏"""
    orders = await get_all_orders()
    
    if not orders:
        await message.answer("üì≠ –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return

    # –í—ã—á–∏—Å–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * orders_per_page
    end_idx = start_idx + orders_per_page
    page_orders = orders[start_idx:end_idx]

    orders_text = f"üìã –í—Å–µ –∑–∞–∫–∞–∑—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}):\n\n"
    
    for i, order in enumerate(page_orders, start_idx + 1):
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
        assignment = await get_order_assignment(order["id"])
        assigned_info = ""
        if assignment:
            assigned_info = f"üë®‚Äçüíº –ù–∞–∑–Ω–∞—á–µ–Ω: {assignment['staff_name']} (@{assignment['staff_username']})"
        
        orders_text += (
            f"#{i} üÜî {order['id']}\n"
            f"üë§ –ù–∏–∫: {order['nickname']}\n"
            f"üîó –°—Å—ã–ª–∫–∞: {order['username_link']}\n"
            f"üöò –ê–±–æ–Ω–µ–º–µ–Ω—Ç: {order['subscription']}\n"
            f"üìÖ –ù–∞—á–∞–ª–æ: {order['start']}\n"
            f"üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {order['end']}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {order['status']}\n"
            f"{assigned_info}\n"
            f"üïê –°–æ–∑–¥–∞–Ω: {order['created_at']}\n\n"
        )

    await message.answer(
        orders_text,
        reply_markup=admin_orders_keyboard(page, orders_per_page)
    )

@dp.message(Command("add_order_admin"))
async def cmd_add_order_admin(message: Message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    admin_order_management[message.from_user.id] = {
        "stage": "waiting_nickname",
        "order_data": {}
    }

    await message.answer(
        "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ Name_Surname):"
    )

@dp.message(Command("delete_order"))
async def cmd_delete_order(message: Message):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ ID"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    try:
        order_id = message.text.split()[1]  # /delete_order ORDER_ID
    except IndexError:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_order <ID_–∑–∞–∫–∞–∑–∞>")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    orders = await get_all_orders()
    order_exists = any(order["id"] == order_id for order in orders)
    
    if not order_exists:
        await message.answer(f"‚ùå –ó–∞–∫–∞–∑ —Å ID {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await message.answer(
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ {order_id}?",
        reply_markup=admin_confirm_delete_keyboard(order_id)
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ ---
@dp.message(F.text)
async def handle_text(message: Message):
    if message.chat.type != "private":
        return

    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
    staff_management_entry = staff_management_data.get(user_id)
    if staff_management_entry:
        await handle_staff_management(message, staff_management_entry)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    admin_order_entry = admin_order_management.get(user_id)
    if admin_order_entry:
        await handle_admin_order_management(message, admin_order_entry)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∑–∞–∫–∞–∑—ã, –ø–æ–¥–¥–µ—Ä–∂–∫–∞)
    user_entry = player_data.get(user_id)
    if not user_entry:
        return

    if user_entry.get("stage") == "waiting_nickname":
        nickname = message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–∏–∫–∞
        is_valid, validation_message = validate_nickname(nickname)

        if not is_valid:
            await message.answer(validation_message)
            return

        username_link = f"https://t.me/{message.from_user.username}" if message.from_user.username else "–ù–µ—Ç —Å—Å—ã–ª–∫–∏"

        # –ï—â–µ —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –≤—Ä–µ–º—è)
        can_create, message_text = await can_user_create_order(user_id, username_link)

        if not can_create:
            await message.answer(message_text)
            player_data.pop(user_id, None)
            return

        player_data[user_id] = {
            "stage": "choose_subscription",
            "nickname": nickname,
            "username_link": username_link
        }
        await message.answer(
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ, {nickname}! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç:",
            reply_markup=subscription_keyboard()
        )

    elif user_entry.get("stage") == "waiting_issue":
        nickname = user_entry.get("nickname")
        subscription = user_entry.get("subscription")
        end_date = user_entry.get("end")
        username_link = f"https://t.me/{message.from_user.username}" if message.from_user.username else "–ù–µ—Ç —Å—Å—ã–ª–∫–∏"
        issue_text = message.text.strip()
        issue_id = str(uuid.uuid4())[:8]
        date_now = datetime.now().strftime("%d.%m.%Y %H:%M")

        support_requests.append({
            "id": issue_id,
            "user_id": user_id,
            "nickname": nickname,
            "username_link": username_link,
            "subscription": subscription,
            "end": end_date,
            "issue": issue_text,
            "date": date_now
        })

        await bot.send_message(
            chat_id=GROUP_ID,
            message_thread_id=TOPIC_SUPPORT,
            text=(
                f"üÜò –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É\n"
                f"üë§ –ò–≥—Ä–æ–≤–æ–π –Ω–∏–∫: {nickname}\n"
                f"üîó –°—Å—ã–ª–∫–∞: {username_link}\n"
                f"üöò –ê–±–æ–Ω–µ–º–µ–Ω—Ç: {subscription}\n"
                f"üìÜ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date}\n"
                f"üí¨ –ü—Ä–æ–±–ª–µ–º–∞: {issue_text}\n"
                f"üìÖ –î–∞—Ç–∞: {date_now}\n"
                f"üÜî ID –æ–±—Ä–∞—â–µ–Ω–∏—è: {issue_id}"
            )
        )
        await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
        player_data.pop(user_id, None)

async def handle_admin_order_management(message: Message, management_data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    user_id = message.from_user.id
    text = message.text.strip()

    if management_data["stage"] == "waiting_nickname":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–∏–∫–∞
        is_valid, validation_message = validate_nickname(text)
        if not is_valid:
            await message.answer(validation_message)
            return

        management_data["order_data"]["nickname"] = text
        management_data["stage"] = "waiting_subscription"
        
        await message.answer(
            "‚úÖ –ù–∏–∫ –ø—Ä–∏–Ω—è—Ç\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:",
            reply_markup=subscription_keyboard()
        )

    elif management_data["stage"] == "waiting_subscription":
        # –≠—Ç–æ—Ç —ç—Ç–∞–ø –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ callback
        pass

    elif management_data["stage"] == "waiting_user_id":
        try:
            user_id_input = int(text)
            management_data["order_data"]["user_id"] = user_id_input
            management_data["stage"] = "waiting_username_link"
            
            await message.answer(
                "‚úÖ User ID –ø—Ä–∏–Ω—è—Ç\n\n"
                "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://t.me/username –∏–ª–∏ '–Ω–µ—Ç'):"
            )
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç User ID! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä.")

    elif management_data["stage"] == "waiting_username_link":
        management_data["order_data"]["username_link"] = text if text != "–Ω–µ—Ç" else "–ù–µ—Ç —Å—Å—ã–ª–∫–∏"
        management_data["stage"] = "waiting_start_date"
        
        await message.answer(
            "‚úÖ –°—Å—ã–ª–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '—Å–µ–≥–æ–¥–Ω—è' –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã:"
        )

    elif management_data["stage"] == "waiting_start_date":
        if text.lower() == "—Å–µ–≥–æ–¥–Ω—è":
            start_date = datetime.now()
        else:
            try:
                start_date = datetime.strptime(text, "%d.%m.%Y")
            except ValueError:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
                return

        management_data["order_data"]["start"] = start_date.strftime("%d.%m.%Y")
        management_data["stage"] = "waiting_end_date"
        
        await message.answer(
            "‚úÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '+7' –¥–ª—è 7 –¥–Ω–µ–π –æ—Ç –Ω–∞—á–∞–ª–∞:"
        )

    elif management_data["stage"] == "waiting_end_date":
        if text == "+7":
            start_date = datetime.strptime(management_data["order_data"]["start"], "%d.%m.%Y")
            end_date = start_date + timedelta(days=7)
        else:
            try:
                end_date = datetime.strptime(text, "%d.%m.%Y")
            except ValueError:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
                return

        management_data["order_data"]["end"] = end_date.strftime("%d.%m.%Y")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
        success, order_id = await add_order_by_admin(management_data["order_data"])
        
        if success:
            await message.answer(
                f"‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                f"üë§ –ù–∏–∫: {management_data['order_data']['nickname']}\n"
                f"üöò –ê–±–æ–Ω–µ–º–µ–Ω—Ç: {management_data['order_data']['subscription']}\n"
                f"üìÖ –ü–µ—Ä–∏–æ–¥: {management_data['order_data']['start']} - {management_data['order_data']['end']}\n"
                f"üÜî ID –∑–∞–∫–∞–∑–∞: {order_id}"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        admin_order_management.pop(user_id, None)

async def handle_staff_management(message: Message, management_data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏"""
    user_id = message.from_user.id
    text = message.text.strip()

    if management_data["stage"] == "waiting_staff_user_id":
        try:
            staff_user_id = int(text)
            management_data["staff_user_id"] = staff_user_id

            if management_data["action"] == "add":
                management_data["stage"] = "waiting_staff_name"
                await message.answer(
                    "‚úÖ User ID –ø—Ä–∏–Ω—è—Ç\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:"
                )
            elif management_data["action"] == "set_position":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                staff_info = await get_staff_member(staff_user_id)
                if not staff_info:
                    await message.answer(f"‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å ID {staff_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    staff_management_data.pop(user_id, None)
                    return

                management_data["stage"] = "waiting_staff_position"
                await message.answer(
                    f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω: {staff_info['name']}\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:"
                )
            elif management_data["action"] == "remove":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                staff_info = await get_staff_member(staff_user_id)
                if not staff_info:
                    await message.answer(f"‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å ID {staff_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    staff_management_data.pop(user_id, None)
                    return

                # –£–¥–∞–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                success, result_message = await remove_staff_member(staff_user_id, user_id)
                await message.answer(result_message)
                staff_management_data.pop(user_id, None)

        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç User ID! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä.")

    elif management_data["stage"] == "waiting_staff_name":
        management_data["staff_name"] = text
        management_data["stage"] = "waiting_staff_username"
        await message.answer(
            "‚úÖ –ò–º—è –ø—Ä–∏–Ω—è—Ç–æ\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ username —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–±–µ–∑ @):"
        )

    elif management_data["stage"] == "waiting_staff_username":
        management_data["staff_username"] = text
        management_data["stage"] = "waiting_staff_position"
        await message.answer(
            "‚úÖ Username –ø—Ä–∏–Ω—è—Ç\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:"
        )

    elif management_data["stage"] == "waiting_staff_position":
        position = text

        if management_data["action"] == "add":
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            success, result_message = await add_staff_member(
                management_data["staff_user_id"],
                management_data["staff_name"],
                management_data["staff_username"],
                position,
                user_id
            )
            await message.answer(result_message)

        elif management_data["action"] == "set_position":
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç—å
            success, result_message = await update_staff_position(
                management_data["staff_user_id"],
                position,
                user_id
            )
            await message.answer(result_message)

        staff_management_data.pop(user_id, None)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ ---
@dp.callback_query(F.data.startswith("admin_orders_page_"))
async def handle_admin_orders_page(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –∑–∞–∫–∞–∑–æ–≤"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        page = int(callback.data.replace("admin_orders_page_", ""))
        await show_orders_page(callback.message, page)
        await callback.answer()
    except ValueError:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏")

@dp.callback_query(F.data == "admin_all_orders_0")
async def handle_admin_all_orders(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    await show_orders_page(callback.message, 0)
    await callback.answer()

@dp.callback_query(F.data == "admin_add_order")
async def handle_admin_add_order(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    admin_order_management[callback.from_user.id] = {
        "stage": "waiting_nickname",
        "order_data": {
            "user_id": 0,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            "username_link": "–î–æ–±–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
        }
    }

    await callback.message.answer(
        "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ Name_Surname):"
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("admin_delete_order_"))
async def handle_admin_delete_order(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    order_id = callback.data.replace("admin_delete_order_", "")
    
    await callback.message.answer(
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ {order_id}?",
        reply_markup=admin_confirm_delete_keyboard(order_id)
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("admin_confirm_delete_"))
async def handle_admin_confirm_delete(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    order_id = callback.data.replace("admin_confirm_delete_", "")
    
    success = await delete_order_from_db(order_id)
    
    if success:
        await callback.message.answer(f"‚úÖ –ó–∞–∫–∞–∑ {order_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤
        await show_orders_page(callback.message, 0)
    else:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ {order_id}")
    
    await callback.answer()

# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–∑–∞–∫–∞–∑—ã, –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è) ---
@dp.callback_query(F.data == "start_order")
async def ask_nickname(callback: CallbackQuery):
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
    username_link = f"https://t.me/{callback.from_user.username}" if callback.from_user.username else "–ù–µ—Ç —Å—Å—ã–ª–∫–∏"
    can_create, message_text = await can_user_create_order(user_id, username_link)

    if not can_create:
        await callback.message.answer(message_text)
        await callback.answer()
        return

    if message_text and "–º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å" in message_text:
        await callback.message.answer(message_text)

    player_data[user_id] = {"stage": "waiting_nickname"}

    # –û–±—ä—è—Å–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–∏–∫–∞
    await callback.message.answer(
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫:\n\n"
        "‚ö†Ô∏è <b>–§–æ—Ä–º–∞—Ç –Ω–∏–∫–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ (_)</b>\n"
        "üìù <b>–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:</b> <code>Ivan_Ivanov</code>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫:",
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data == "support_start")
async def start_support(callback: CallbackQuery):
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    active_orders = await get_user_active_orders(user_id)

    if not active_orders:
        await callback.message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞. –û—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑, —á—Ç–æ–±—ã –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
        await callback.answer()
        return

    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑
    active_order = active_orders[0]
    player_data[user_id] = {
        "stage": "waiting_issue",
        "nickname": active_order["nickname"],
        "subscription": active_order["subscription"],
        "end": active_order["end"]
    }
    await callback.message.answer(
        "üõ† –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–º–æ—á—å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ:"
    )
    await callback.answer()

@dp.callback_query(F.data.in_(["econom", "standard", "comfort", "premium"]))
async def process_order(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±—ã—á–Ω—ã–π –ª–∏ —ç—Ç–æ –∑–∞–∫–∞–∑ –∏–ª–∏ –∑–∞–∫–∞–∑ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_order_entry = admin_order_management.get(user_id)
    if admin_order_entry and admin_order_entry["stage"] == "waiting_subscription":
        # –≠—Ç–æ –∑–∞–∫–∞–∑ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        subscription_names = {
            "econom": "–≠–∫–æ–Ω–æ–º",
            "standard": "–°—Ç–∞–Ω–¥–∞—Ä—Ç", 
            "comfort": "–ö–æ–º—Ñ–æ—Ä—Ç",
            "premium": "–ü—Ä–µ–º–∏—É–º"
        }
        
        chosen = callback.data
        admin_order_entry["order_data"]["subscription"] = subscription_names[chosen]
        admin_order_entry["stage"] = "waiting_user_id"
        
        await callback.message.answer(
            "‚úÖ –ê–±–æ–Ω–µ–º–µ–Ω—Ç –≤—ã–±—Ä–∞–Ω\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ User ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä) –∏–ª–∏ 0 –µ—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ:"
        )
        await callback.answer()
        return

    # –û–±—ã—á–Ω—ã–π –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = player_data.get(user_id)
    if not data or data.get("stage") != "choose_subscription":
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫ /start", show_alert=True)
        return

    subscription_names = {
        "econom": "–≠–∫–æ–Ω–æ–º",
        "standard": "–°—Ç–∞–Ω–¥–∞—Ä—Ç",
        "comfort": "–ö–æ–º—Ñ–æ—Ä—Ç",
        "premium": "–ü—Ä–µ–º–∏—É–º"
    }

    chosen = callback.data
    nickname = data["nickname"]
    username_link = data["username_link"]

    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    can_create, message_text = await can_user_create_order(user_id, username_link)

    if not can_create:
        await callback.message.answer(message_text)
        await callback.answer()
        return

    order_id = str(uuid.uuid4())[:8]
    start_date = datetime.now()
    end_date = start_date + timedelta(days=7)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    order_confirmations[order_id] = {
        "user_id": user_id,
        "nickname": nickname,
        "username_link": username_link,
        "subscription": subscription_names[chosen],
        "start": start_date.strftime("%d.%m.%Y"),
        "end": end_date.strftime("%d.%m.%Y"),
        "callback_message": callback.message
    }

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    confirm_text = (
        f"üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:\n\n"
        f"üë§ –ò–≥—Ä–æ–≤–æ–π –Ω–∏–∫: {nickname}\n"
        f"üöò –ê–±–æ–Ω–µ–º–µ–Ω—Ç: {subscription_names[chosen]}\n"
        f"üìÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {start_date.strftime('%d.%m.%Y')} ‚Äî {end_date.strftime('%d.%m.%Y')}\n\n"
        f"üÜî ID –∑–∞–∫–∞–∑–∞: {order_id}"
    )

    await callback.message.answer(
        confirm_text,
        reply_markup=confirmation_keyboard(order_id)
    )
    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ---
@dp.callback_query(F.data.startswith("confirm_"))
async def confirm_order(callback: CallbackQuery):
    order_id = callback.data.replace("confirm_", "")

    if order_id not in order_confirmations:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª", show_alert=True)
        return

    order_data = order_confirmations[order_id]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    success = await save_order_to_db({
        "id": order_id,
        "user_id": order_data["user_id"],
        "nickname": order_data["nickname"],
        "username_link": order_data["username_link"],
        "subscription": order_data["subscription"],
        "start": order_data["start"],
        "end": order_data["end"]
    })

    if not success:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", show_alert=True)
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    order_text = (
        f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑\n"
        f"üë§ –ò–≥—Ä–æ–≤–æ–π –Ω–∏–∫: {order_data['nickname']}\n"
        f"üîó –°—Å—ã–ª–∫–∞: {order_data['username_link']}\n"
        f"üöò –ê–±–æ–Ω–µ–º–µ–Ω—Ç: {order_data['subscription']}\n"
        f"üìÖ –ù–∞—á–∞–ª–æ: {order_data['start']}\n"
        f"üìÜ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {order_data['end']}\n"
        f"üÜî ID –∑–∞–∫–∞–∑–∞: {order_id}\n"
        f"üïê –°–æ–∑–¥–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )

    message = await bot.send_message(
        chat_id=GROUP_ID,
        message_thread_id=TOPIC_ORDERS,
        text=order_text,
        reply_markup=staff_actions_keyboard(order_id)
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    await callback.message.edit_text(
        f"‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n"
        f"üë§ –ù–∏–∫: {order_data['nickname']}\n"
        f"üöò –ê–±–æ–Ω–µ–º–µ–Ω—Ç: {order_data['subscription']}\n"
        f"üìÖ –°—Ä–æ–∫: {order_data['start']} ‚Äî {order_data['end']}\n"
        f"üÜî ID: {order_id}\n\n"
        f"–û–∂–∏–¥–∞–π—Ç–µ, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä."
    )

    # –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    del order_confirmations[order_id]
    await callback.answer()

@dp.callback_query(F.data.startswith("cancel_"))
async def cancel_order(callback: CallbackQuery):
    order_id = callback.data.replace("cancel_", "")

    if order_id in order_confirmations:
        del order_confirmations[order_id]

    await callback.message.edit_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")
    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∑—è—Ç–∏—è –∑–∞–∫–∞–∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º ---
@dp.callback_query(F.data.startswith("take_order_"))
async def take_order(callback: CallbackQuery):
    """–ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∑—è—Ç–∏—è –∑–∞–∫–∞–∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    staff_members = await load_staff_from_db()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º
    staff_id = callback.from_user.id
    if staff_id not in staff_members:
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", show_alert=True)
        return

    order_id = callback.data.replace("take_order_", "")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    staff_data = staff_members.get(staff_id, {})
    staff_name = staff_data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫")
    staff_username = staff_data.get("username", "")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ
    if staff_username:
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è HTML
        safe_staff_name = html.escape(staff_name)
        staff_display = f'<a href="https://t.me/{staff_username}">{safe_staff_name}</a>'
    else:
        staff_display = html.escape(staff_name)

    # –ù–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–∫–∞–∑ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
    success = await assign_order_to_staff(order_id, staff_id, staff_name, staff_username)

    if not success:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞", show_alert=True)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    await update_order_status(order_id, "assigned")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
    original_text = callback.message.text

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ, –∫–æ—Ç–æ—Ä—ã–π –≤–∑—è–ª –∑–∞–∫–∞–∑
    current_time = datetime.now().strftime('%d.%m.%Y %H:%M')
    updated_text = original_text + f"\n\nüë®‚Äçüíº –ó–∞–∫–∞–∑ –≤–∑—è—Ç: {staff_display}\n‚è∞ –í–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É: {current_time}"

    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤–∑—è—Ç–∏—è –∑–∞–∫–∞–∑–∞
    await callback.message.edit_text(
        updated_text,
        parse_mode="HTML",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –≤–º–µ—Å—Ç–æ Markdown
        reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )

    await callback.answer(f"‚úÖ –í—ã –≤–∑—è–ª–∏ –∑–∞–∫–∞–∑ {order_id} –≤ —Ä–∞–±–æ—Ç—É")

# --- –î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã ---
@dp.message(Command("getid"))
async def cmd_getid(message: Message):
    await message.answer(f"Chat ID: {message.chat.id}\nUser ID: {message.from_user.id}")

@dp.message(Command("myid"))
async def cmd_myid(message: Message):
    user_id = message.from_user.id
    staff_members = await load_staff_from_db()
    
    is_admin = user_id in ADMIN_IDS
    is_staff = user_id in staff_members
    admin_status = "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if is_admin else "‚ùå –ù–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    staff_status = "‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫" if is_staff else "‚ùå –ù–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫"

    await message.answer(
        f"üë§ –í–∞—à ID: {user_id}\n"
        f"üõ° –°—Ç–∞—Ç—É—Å: {admin_status}\n"
        f"üë®‚Äçüíº –†–æ–ª—å: {staff_status}\n"
        f"üìã ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {ADMIN_IDS}"
    )

@dp.message(Command("my_orders"))
async def cmd_my_orders(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã"""
    user_id = message.from_user.id

    active_orders = await get_user_active_orders(user_id)

    if not active_orders:
        await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤.")
        return

    orders_text = "üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã:\n\n"
    for i, order in enumerate(active_orders, 1):
        orders_text += (
            f"{i}. üöò {order['subscription']}\n"
            f"   üë§ –ù–∏–∫: {order['nickname']}\n"
            f"   üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {order['end']}\n"
            f"   üÜî ID: {order['id']}\n\n"
        )

    await message.answer(orders_text)

@dp.message(Command("staff_orders"))
async def cmd_staff_orders(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –≤ —Ä–∞–±–æ—Ç–µ —É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM assignments WHERE status = "in_progress"')
        active_assignments = cursor.fetchall()
        
        conn.close()

        if not active_assignments:
            await message.answer("üì≠ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ.")
            return

        assignments_text = "üë®‚Äçüíº –ó–∞–∫–∞–∑—ã –≤ —Ä–∞–±–æ—Ç–µ:\n\n"
        for i, assignment in enumerate(active_assignments, 1):
            staff_info = f"@{assignment[3]}" if assignment[3] else assignment[2]
            assignments_text += (
                f"{i}. üÜî {assignment[0]}\n"
                f"   üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {staff_info}\n"
                f"   ‚è∞ –í–∑—è—Ç: {assignment[4]}\n\n"
            )

        await message.answer(assignments_text)

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

@dp.message(Command("debug_orders"))
async def cmd_debug_orders(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    orders = await get_all_orders()

    if not orders:
        await message.answer("üì≠ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    orders_list = "\n".join(
        [f"üÜî {o['id']} | üë§ {o['nickname']} | üöò {o['subscription']} | üìÖ –¥–æ {o['end']} | üìä {o['status']}" for o in
         orders])
    await message.answer(
        f"üìä –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {len(orders)}\n\n{orders_list}"
    )

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    print("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –æ–Ω –ø—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è —É–∂–µ...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
    if not init_database():
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    staff_members = await load_staff_from_db()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    test_orders = await get_all_orders()
    print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ó–∞–∫–∞–∑–æ–≤ –≤ –±–∞–∑–µ: {len(test_orders)}")
    print(f"üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {len(staff_members)}")

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ, –ø—Ä–æ—Å–Ω—É–ª—Å—è xD")
    print("üí° –†–µ–∂–∏–º: SQLite Database")
    print("üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start, /status, /my_orders, /staff")
    print("üë• –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏:")
    print("   /add_staff - –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
    print("   /set_position - –∏–∑–º–µ–Ω–∏—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å")
    print("   /remove_staff - —É–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
    print("   /list_staff - —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
    print("üìã –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ (–∞–¥–º–∏–Ω—ã):")
    print("   /all_orders - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã")
    print("   /add_order_admin - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑")
    print("   /delete_order <ID> - —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑")

    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("‚ùå –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
