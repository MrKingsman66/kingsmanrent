import asyncio
import uuid
import re
import html
import os
import json
from datetime import datetime, timedelta
import gspread
from google.oauth2.service_account import Credentials
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
)

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_ID = -1002773883024
TOPIC_ORDERS = 81003
TOPIC_SUPPORT = 81451
ADMIN_IDS = [841285005]

# –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∏–∑ Google Sheets
STAFF_MEMBERS = {}

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets ---
SERVICE_ACCOUNT_JSON = os.getenv("SERVICE_ACCOUNT_JSON")
SPREADSHEET_NAME = 'Kingsman Rent Orders'

SCOPES = [
    'https://www.googleapis.com/auth/spreadsheets',
    'https://www.googleapis.com/auth/drive',
]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
creds = None
gc = None
worksheet_orders = None
worksheet_assignments = None
worksheet_staff = None
sheets_enabled = False

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏)
player_data = {}
support_requests = []
order_confirmations = {}
staff_management_data = {}


def init_google_sheets():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    global creds, gc, worksheet_orders, worksheet_assignments, worksheet_staff, sheets_enabled
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        if not SERVICE_ACCOUNT_JSON:
            print("‚ùå SERVICE_ACCOUNT_JSON –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return False
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        try:
            service_account_info = json.loads(SERVICE_ACCOUNT_JSON)
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            print(f"üìù –ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: {SERVICE_ACCOUNT_JSON[:100]}...")  # –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            return False
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_file = "temp_service_account.json"
        with open(temp_file, 'w') as f:
            json.dump(service_account_info, f)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        creds = Credentials.from_service_account_file(temp_file, scopes=SCOPES)
        gc = gspread.authorize(creds)

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        spreadsheet = gc.open(SPREADSHEET_NAME)

        # –õ–∏—Å—Ç –∑–∞–∫–∞–∑–æ–≤
        try:
            worksheet_orders = spreadsheet.worksheet("Orders")
        except gspread.WorksheetNotFound:
            worksheet_orders = spreadsheet.add_worksheet(title="Orders", rows="1000", cols="20")
            headers = ["ID", "User ID", "Nickname", "Username Link", "Subscription", "Start Date", "End Date", "Created At", "Status"]
            worksheet_orders.append_row(headers)

        # –õ–∏—Å—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        try:
            worksheet_assignments = spreadsheet.worksheet("Assignments")
        except gspread.WorksheetNotFound:
            worksheet_assignments = spreadsheet.add_worksheet(title="Assignments", rows="1000", cols="20")
            headers = ["Order ID", "Staff ID", "Staff Name", "Staff Username", "Assigned At", "Status"]
            worksheet_assignments.append_row(headers)

        # –õ–∏—Å—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        try:
            worksheet_staff = spreadsheet.worksheet("Staff")
        except gspread.WorksheetNotFound:
            worksheet_staff = spreadsheet.add_worksheet(title="Staff", rows="1000", cols="20")
            headers = ["User ID", "Name", "Username", "Position", "Added At", "Added By", "Status"]
            worksheet_staff.append_row(headers)
            worksheet_staff.append_row([841285005, "Denis_Kingsman", "admin", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", datetime.now().strftime("%d.%m.%Y %H:%M"), "system", "active"])

        sheets_enabled = True
        print("‚úÖ Google Sheets —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.remove(temp_file)
        except:
            pass
            
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
        return False


# --- –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ Google Sheets ---
async def load_staff_from_sheets():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ Google Sheets"""
    global STAFF_MEMBERS
    try:
        if not sheets_enabled:
            print("‚ùå Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return {}

        all_records = worksheet_staff.get_all_records()
        staff_members = {}

        for record in all_records:
            if record.get("User ID") and record.get("Status") == "active":
                user_id = int(record["User ID"])
                staff_members[user_id] = {
                    "name": record["Name"],
                    "username": record.get("Username", ""),
                    "position": record.get("Position", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫")
                }

        STAFF_MEMBERS = staff_members
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(STAFF_MEMBERS)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ Google Sheets")
        return staff_members
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {e}")
        return {}


# --- –†–∞–±–æ—Ç–∞ —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ ---
async def add_staff_member(user_id, name, username, position, added_by):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    try:
        if not sheets_enabled:
            return False, "‚ùå Google Sheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞"

        existing_staff = await get_staff_member(user_id)
        if existing_staff:
            return False, f"‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å ID {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"

        worksheet_staff.append_row([
            user_id, name, username, position,
            datetime.now().strftime("%d.%m.%Y %H:%M"), added_by, "active"
        ])

        await load_staff_from_sheets()
        return True, f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {name} (@{username}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ {position}"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}")
        return False, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}"


async def update_staff_position(user_id, new_position, updated_by):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    try:
        if not sheets_enabled:
            return False, "‚ùå Google Sheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞"

        cell = worksheet_staff.find(str(user_id))
        if not cell:
            return False, f"‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"

        worksheet_staff.update_cell(cell.row, 4, new_position)
        await load_staff_from_sheets()

        staff_name = STAFF_MEMBERS.get(user_id, {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        return True, f"‚úÖ –î–æ–ª–∂–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {staff_name} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {new_position}"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏: {e}")
        return False, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏: {e}"


async def remove_staff_member(user_id, removed_by):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    try:
        if not sheets_enabled:
            return False, "‚ùå Google Sheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞"

        cell = worksheet_staff.find(str(user_id))
        if not cell:
            return False, f"‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"

        worksheet_staff.update_cell(cell.row, 7, "inactive")
        await load_staff_from_sheets()

        staff_name = STAFF_MEMBERS.get(user_id, {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        return True, f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {staff_name} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}")
        return False, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}"


async def get_staff_member(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ"""
    try:
        if not sheets_enabled:
            return None

        cell = worksheet_staff.find(str(user_id))
        if cell:
            row = worksheet_staff.row_values(cell.row)
            return {
                "user_id": row[0], "name": row[1], "username": row[2], "position": row[3],
                "added_at": row[4], "added_by": row[5], "status": row[6]
            }
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}")
        return None


# --- –†–∞–±–æ—Ç–∞ —Å –∑–∞–∫–∞–∑–∞–º–∏ ---
async def get_all_orders():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Google Sheets"""
    try:
        if not sheets_enabled:
            print("‚ùå Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return []

        all_records = worksheet_orders.get_all_records()
        orders = []

        for record in all_records:
            if record.get("ID"):
                orders.append({
                    "id": record["ID"], "user_id": int(record["User ID"]), "nickname": record["Nickname"],
                    "username_link": record["Username Link"], "subscription": record["Subscription"],
                    "start": record["Start Date"], "end": record["End Date"], "status": record.get("Status", "pending")
                })

        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(orders)} –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Google Sheets")
        return orders
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤: {e}")
        return []


async def save_order_to_sheets(order_data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ Google Sheets"""
    try:
        if not sheets_enabled:
            return False

        worksheet_orders.append_row([
            order_data["id"], order_data["user_id"], order_data["nickname"],
            order_data["username_link"], order_data["subscription"],
            order_data["start"], order_data["end"],
            datetime.now().strftime("%d.%m.%Y %H:%M"), "pending"
        ])

        print(f"‚úÖ –ó–∞–∫–∞–∑ {order_data['id']} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Google Sheets")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        return False


async def update_order_status(order_id, status):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
    try:
        if not sheets_enabled:
            return False

        cell = worksheet_orders.find(order_id)
        if cell:
            worksheet_orders.update_cell(cell.row, 9, status)
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {status}")
            return True
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return False


async def assign_order_to_staff(order_id, staff_id, staff_name, staff_username):
    """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É"""
    try:
        if not sheets_enabled:
            return False

        worksheet_assignments.append_row([
            order_id, staff_id, staff_name, staff_username,
            datetime.now().strftime("%d.%m.%Y %H:%M"), "in_progress"
        ])

        print(f"‚úÖ –ó–∞–∫–∞–∑ {order_id} –Ω–∞–∑–Ω–∞—á–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {staff_name} (@{staff_username})")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        return False


async def get_order_assignment(order_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞"""
    try:
        if not sheets_enabled:
            return None

        cell = worksheet_assignments.find(order_id)
        if cell:
            row = worksheet_assignments.row_values(cell.row)
            return {
                "order_id": row[0], "staff_id": row[1], "staff_name": row[2],
                "staff_username": row[3], "assigned_at": row[4], "status": row[5]
            }
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {e}")
        return None


async def get_user_active_orders(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        orders = await get_all_orders()
        active_orders = []
        today = datetime.now().date()

        for order in orders:
            if order["user_id"] == user_id:
                try:
                    end_date = datetime.strptime(order["end"], "%d.%m.%Y").date()
                    if end_date >= today:
                        active_orders.append(order)
                except ValueError:
                    continue

        return active_orders
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return []


async def can_user_create_order(user_id, username_link):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑"""
    try:
        user_orders = []
        all_orders = await get_all_orders()

        for order in all_orders:
            if order["user_id"] == user_id or order["username_link"] == username_link:
                user_orders.append(order)

        if not user_orders:
            return True, None

        active_orders = []
        today = datetime.now().date()

        for order in user_orders:
            try:
                end_date = datetime.strptime(order["end"], "%d.%m.%Y").date()
                days_until_end = (end_date - today).days
                if days_until_end >= 0:
                    active_orders.append((order, days_until_end))
            except ValueError:
                continue

        if not active_orders:
            return True, None

        latest_order = max(active_orders, key=lambda x: datetime.strptime(x[0]["end"], "%d.%m.%Y"))
        order_data, days_until_end = latest_order

        if days_until_end > 1:
            return False, f"‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç '{order_data['subscription']}', –∫–æ—Ç–æ—Ä—ã–π –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {order_data['end']}.\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∑–∞ 1 –¥–µ–Ω—å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ."
        elif days_until_end == 1:
            return True, f"‚ö†Ô∏è –í–∞—à —Ç–µ–∫—É—â–∏–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç '{order_data['subscription']}' –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∑–∞–≤—Ç—Ä–∞ ({order_data['end']}). –í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç."
        else:
            return True, f"‚ö†Ô∏è –í–∞—à —Ç–µ–∫—É—â–∏–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç '{order_data['subscription']}' –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç."

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        return True, None


def validate_nickname(nickname):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –Ω–∏–∫–∞: –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ"""
    if "_" not in nickname:
        return False, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∏–∫–∞! –ù–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ (_).\n\n–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: Denis_Kingsman\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:"

    if len(nickname) < 3:
        return False, "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –Ω–∏–∫! –ù–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞."

    if len(nickname) > 20:
        return False, "‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –Ω–∏–∫! –ù–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤."

    if not re.match(r'^[a-zA-Z0-9_]+$', nickname):
        return False, "‚ùå –ù–∏–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã! –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã (a-z, A-Z), —Ü–∏—Ñ—Ä—ã (0-9) –∏ –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ (_)."

    return True, "‚úÖ –§–æ—Ä–º–∞—Ç –Ω–∏–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π!"


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def start_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="start_order")],
        [InlineKeyboardButton(text="üõ† –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support_start")]
    ])


def subscription_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöó –≠–∫–æ–Ω–æ–º", callback_data="econom")],
        [InlineKeyboardButton(text="üöò –°—Ç–∞–Ω–¥–∞—Ä—Ç", callback_data="standard")],
        [InlineKeyboardButton(text="üöô –ö–æ–º—Ñ–æ—Ä—Ç", callback_data="comfort")],
        [InlineKeyboardButton(text="üèé –ü—Ä–µ–º–∏—É–º", callback_data="premium")]
    ])


def confirmation_keyboard(order_id) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{order_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{order_id}")
        ]
    ])


def staff_actions_keyboard(order_id) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í–∑—è—Ç—å –∑–∞–∫–∞–∑", callback_data=f"take_order_{order_id}")]
    ])


# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---
@dp.message(Command("start"))
async def cmd_start(message: Message):
    if message.chat.type != "private":
        return
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Kingsman Rent.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=start_keyboard()
    )


@dp.message(Command("status"))
async def cmd_status(message: Message):
    print(f"üîß –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /status –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

    orders = await get_all_orders()
    today = datetime.now().date()
    active_orders = 0
    pending_orders = 0
    assigned_orders = 0

    for order in orders:
        try:
            if order["status"] == "assigned":
                assigned_orders += 1
            elif order["status"] == "pending":
                pending_orders += 1

            end_date = datetime.strptime(order["end"], "%d.%m.%Y").date()
            if end_date >= today:
                active_orders += 1
        except ValueError:
            continue

    storage_type = "Google Sheets" if sheets_enabled else "‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞"

    status_text = (
        f"ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ Kingsman Rent:\n"
        f"üìä –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)}\n"
        f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤: {active_orders}\n"
        f"üíæ –•—Ä–∞–Ω–∏–ª–∏—â–µ: {storage_type}\n"
        f"üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(STAFF_MEMBERS)}"
    )

    if message.from_user.id in ADMIN_IDS:
        status_text += f"\n\nüë§ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {len(player_data)}"
        status_text += f"\nüÜò –û–±—Ä–∞—â–µ–Ω–∏–π –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {len(support_requests)}"
        status_text += f"\nüîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"

    await message.answer(status_text)
    print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")


# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
# [–ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –∏–∑–º–µ–Ω—è–ª—Å—è]
# –î–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞ –æ—Å—Ç–∞–≤–ª—é —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

@dp.callback_query(F.data == "start_order")
async def ask_nickname(callback: CallbackQuery):
    user_id = callback.from_user.id
    username_link = f"https://t.me/{callback.from_user.username}" if callback.from_user.username else "–ù–µ—Ç —Å—Å—ã–ª–∫–∏"
    can_create, message_text = await can_user_create_order(user_id, username_link)

    if not can_create:
        await callback.message.answer(message_text)
        await callback.answer()
        return

    if message_text and "–º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å" in message_text:
        await callback.message.answer(message_text)

    player_data[user_id] = {"stage": "waiting_nickname"}
    await callback.message.answer(
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫:\n\n"
        "‚ö†Ô∏è <b>–§–æ—Ä–º–∞—Ç –Ω–∏–∫–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ (_)</b>\n"
        "üìù <b>–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:</b> <code>Ivan_Ivanov</code>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫:",
        parse_mode="HTML"
    )
    await callback.answer()


@dp.callback_query(F.data.in_(["econom", "standard", "comfort", "premium"]))
async def process_order(callback: CallbackQuery):
    user_id = callback.from_user.id
    data = player_data.get(user_id)
    if not data or data.get("stage") != "choose_subscription":
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫ /start", show_alert=True)
        return

    subscription_names = {
        "econom": "–≠–∫–æ–Ω–æ–º", "standard": "–°—Ç–∞–Ω–¥–∞—Ä—Ç", 
        "comfort": "–ö–æ–º—Ñ–æ—Ä—Ç", "premium": "–ü—Ä–µ–º–∏—É–º"
    }

    chosen = callback.data
    nickname = data["nickname"]
    username_link = data["username_link"]

    can_create, message_text = await can_user_create_order(user_id, username_link)
    if not can_create:
        await callback.message.answer(message_text)
        await callback.answer()
        return

    order_id = str(uuid.uuid4())[:8]
    start_date = datetime.now()
    end_date = start_date + timedelta(days=7)

    order_confirmations[order_id] = {
        "user_id": user_id, "nickname": nickname, "username_link": username_link,
        "subscription": subscription_names[chosen], "start": start_date.strftime("%d.%m.%Y"),
        "end": end_date.strftime("%d.%m.%Y"), "callback_message": callback.message
    }

    confirm_text = (
        f"üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:\n\n"
        f"üë§ –ò–≥—Ä–æ–≤–æ–π –Ω–∏–∫: {nickname}\n"
        f"üöò –ê–±–æ–Ω–µ–º–µ–Ω—Ç: {subscription_names[chosen]}\n"
        f"üìÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {start_date.strftime('%d.%m.%Y')} ‚Äî {end_date.strftime('%d.%m.%Y')}\n\n"
        f"üÜî ID –∑–∞–∫–∞–∑–∞: {order_id}"
    )

    await callback.message.answer(confirm_text, reply_markup=confirmation_keyboard(order_id))
    await callback.answer()


@dp.callback_query(F.data.startswith("confirm_"))
async def confirm_order(callback: CallbackQuery):
    order_id = callback.data.replace("confirm_", "")

    if order_id not in order_confirmations:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª", show_alert=True)
        return

    order_data = order_confirmations[order_id]
    success = await save_order_to_sheets({
        "id": order_id, "user_id": order_data["user_id"], "nickname": order_data["nickname"],
        "username_link": order_data["username_link"], "subscription": order_data["subscription"],
        "start": order_data["start"], "end": order_data["end"]
    })

    if not success:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", show_alert=True)
        return

    order_text = (
        f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑\n"
        f"üë§ –ò–≥—Ä–æ–≤–æ–π –Ω–∏–∫: {order_data['nickname']}\n"
        f"üîó –°—Å—ã–ª–∫–∞: {order_data['username_link']}\n"
        f"üöò –ê–±–æ–Ω–µ–º–µ–Ω—Ç: {order_data['subscription']}\n"
        f"üìÖ –ù–∞—á–∞–ª–æ: {order_data['start']}\n"
        f"üìÜ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {order_data['end']}\n"
        f"üÜî ID –∑–∞–∫–∞–∑–∞: {order_id}\n"
        f"üïê –°–æ–∑–¥–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )

    await bot.send_message(
        chat_id=GROUP_ID,
        message_thread_id=TOPIC_ORDERS,
        text=order_text,
        reply_markup=staff_actions_keyboard(order_id)
    )

    await callback.message.edit_text(
        f"‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n"
        f"üë§ –ù–∏–∫: {order_data['nickname']}\n"
        f"üöò –ê–±–æ–Ω–µ–º–µ–Ω—Ç: {order_data['subscription']}\n"
        f"üìÖ –°—Ä–æ–∫: {order_data['start']} ‚Äî {order_data['end']}\n"
        f"üÜî ID: {order_id}\n\n"
        f"–û–∂–∏–¥–∞–π—Ç–µ, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä."
    )

    del order_confirmations[order_id]
    await callback.answer()


@dp.callback_query(F.data.startswith("take_order_"))
async def take_order(callback: CallbackQuery):
    staff_id = callback.from_user.id
    if staff_id not in STAFF_MEMBERS:
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", show_alert=True)
        return

    order_id = callback.data.replace("take_order_", "")
    staff_data = STAFF_MEMBERS.get(staff_id, {})
    staff_name = staff_data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫")
    staff_username = staff_data.get("username", "")

    if staff_username:
        safe_staff_name = html.escape(staff_name)
        staff_display = f'<a href="https://t.me/{staff_username}">{safe_staff_name}</a>'
    else:
        staff_display = html.escape(staff_name)

    success = await assign_order_to_staff(order_id, staff_id, staff_name, staff_username)
    if not success:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞", show_alert=True)
        return

    await update_order_status(order_id, "assigned")
    original_text = callback.message.text
    current_time = datetime.now().strftime('%d.%m.%Y %H:%M')
    updated_text = original_text + f"\n\nüë®‚Äçüíº –ó–∞–∫–∞–∑ –≤–∑—è—Ç: {staff_display}\n‚è∞ –í–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É: {current_time}"

    await callback.message.edit_text(updated_text, parse_mode="HTML", reply_markup=None)
    await callback.answer(f"‚úÖ –í—ã –≤–∑—è–ª–∏ –∑–∞–∫–∞–∑ {order_id} –≤ —Ä–∞–±–æ—Ç—É")


# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    print("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    if not BOT_TOKEN:
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
        
    if not SERVICE_ACCOUNT_JSON:
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: SERVICE_ACCOUNT_JSON –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return

    if not init_google_sheets():
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Sheets!")
        return

    await load_staff_from_sheets()
    test_orders = await get_all_orders()
    print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ó–∞–∫–∞–∑–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ: {len(test_orders)}")
    print(f"üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {len(STAFF_MEMBERS)}")

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("‚ùå –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
